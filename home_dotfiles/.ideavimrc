set hlsearch
set incsearch
set scrolloff=8
set history=1000
set relativenumber
set nocursorline
set hlsearch
set incsearch
set ignorecase
set smartcase
set gdefault
set clipboard=unnamedplus
set visualbell
set noerrorbells
set guicursor=n-v-c-sm:block,i-ci-ve:block

" Keymap
let mapleader = ","
map <leader><Space> <action>(RecentLocations)
map gc <action>(CommentByLineComment)
nmap <Esc> :nohlsearch<CR>
nmap <C-h> <C-w><C-h>
nmap <C-l> <C-w><C-l>
nmap <C-j> <C-w><C-j>
nmap <C-k> <C-w><C-k>

" Window splits
map <leader>wl <Action>(SplitVertically)
map <leader>wj <Action>(SplitHorizontally)

" Display options
map <leader>dd <action>(ToggleDistractionFreeMode)
map <leader>df <action>(ToggleFullScreen)

" Navigation
map <leader>sa <action>(SearchEverywhere)
map <leader>sA <action>(GotoAction)
map <leader>sn <Action>(ShowNavBar)
map <leader>sf <action>(GotoFile)
map <leader>sr <action>(RecentFiles)
map <leader>sg <action>(TextSearchAction)
map <leader>sc <action>(GotoClass)
map <leader>ss <action>(GotoSymbol)
map <leader>nf <action>(NewScratchFile)
map <leader><leader> <action>(RecentLocations)
map <leader>t <action>(ActivateTerminalToolWindow)

" Refactoring
map <leader>o <Action>(SelectAllOccurrences)
map <leader>f <Action>(ReformatCode)
map <leader>ca <Action>(ShowIntentionActions)
map <leader>cr <Action>(RenameElement)
map <leader>ce <Action>(ExtractMethod)
map <leader>ci <Action>(IntroduceVariable)
map <leader>cF <Action>(IntroduceField)
map <leader>cs <Action>(ChangeSignature)
map <leader>ch <Action>(Refactorings.QuickListPopupAction)

" Go to code
nmap <leader>gd <Action>(GotoDeclaration)
nmap <leader>gy <Action>(GotoTypeDeclaration)
nmap <leader>gi <Action>(GotoImplementation)
nmap <leader>gu <Action>(ShowUsages)
nmap <leader>gt <Action>(GotoTest)
nmap <leader>gf <Action>(Back)
nmap <leader>gb <Action>(Forward)

" ideavim settings
set ideajoin
set ideamarks
set idearefactormode=normal
set ideastatusicon=gray

" buffer (buffer < window < tab)
nmap <leader>bc <Action>(CloseContent)
nmap <leader>ba <Action>(CloseAllEditors)
nmap <leader>bl <Action>(CloseAllEditorsButActive)

nmap <leader>1 <Action>(GoToTab1)
nmap <leader>2 <Action>(GoToTab2)
nmap <leader>3 <Action>(GoToTab3)
nmap <leader>4 <Action>(GoToTab4)
nmap <leader>5 <Action>(GoToTab5)
nmap <leader>6 <Action>(GoToTab6)
nmap <leader>7 <Action>(GoToTab7)
nmap <leader>8 <Action>(GoToTab8)
nmap <leader>9 <Action>(GoToTab9)

" menu
nmap <leader>mm <Action>(MainMenu)
nmap <leader>ma <Action>(AnalyzeMenu)
nmap <leader>mb <Action>(BuildMenu)
nmap <leader>mc <Action>(CodeMenu)
nmap <leader>mf <Action>(FindMenuGroup)
nmap <leader>mg <Action>(GoToMenu)
nmap <leader>ms <Action>(ScopeViewPopupMenu)
nmap <leader>mt <Action>(EditorTabPopupMenu)
nmap <leader>mw <Action>(ToolWindowsGroup)

nmap <leader>sh <Action>(LocalHistory.ShowHistory)
nmap <leader>si <Action>(SelectIn)
nmap <leader>rp <Action>(ReplaceInPath)
nmap <leader>sw <Action>(SearchWeb)

" code

nmap <Tab>h <Action>(PreviousTab)
nmap <Tab>l <Action>(NextTab)
nmap [[ <Action>(GotoPrevElementUnderCaretUsage)
nmap ]] <Action>(GotoNextElementUnderCaretUsage)

" goto
nmap gt <Action>(GotoTest)
nmap go <Action>(GotoSuperMethod)
nmap gd <Action>(GotoDeclaration)
nmap gD <Action>(GotoTypeDeclaration)
nmap gi <Action>(GotoImplementation)
nmap gI <Action>(QuickImplementations)

" todo
nmap <Tab>x <Action>(DeactivateTODOToolWindow)
nmap <Tab>x <Action>(ActivateTODOToolWindow)

" highlight yank (bundle plugin)
set highlightedyank
let g:highlightedyank_highlight_duration = "100"
let g:highlightedyank_highlight_color = "rgba(57, 197, 255, 155)"

" continuous shift
xnoremap < <gv
xnoremap > >gv

vmap J :m '>+1<CR>gv=gv
vmap K :m '<-2<CR>gv=gv

" Don't use Ex mode, use Q for formatting.
map Q gq
